{"version":3,"sources":["components/types/types.component.tsx","components/tax/tax.component.tsx","util/number-format.ts","components/amount/amount.component.tsx","components/info/info.component.tsx","components/form/form.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TYPES","name","id","renderType","props","checked","tip","map","type","key","className","input","value","htmlFor","ref","target","onClick","handleClick","Types","useState","setTip","useRef","Field","component","Overlay","current","show","placement","Tooltip","renderSwitch","defaultChecked","Tax","tax","numberFormat","str","calc","newFormat","split","filter","num","parseInt","join","total","Math","round","toString","reverse","index","count","length","splice","renderAmount","onlyNumber","newStr","test","Amount","validate","Info","Row","ConnectForm","connect","state","form","payment","amount","values","undefined","valid","Container","reduxForm","reducers","combineReducers","formReducer","store","createStore","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b86da497.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\r\n\r\nimport \"./types.styles.scss\";\r\n\r\nimport { Field } from \"redux-form\";\r\n\r\nimport { Overlay, Tooltip } from \"react-bootstrap\";\r\n\r\ninterface TypesConst {\r\n  name: string;\r\n  id: string;\r\n}\r\n\r\nconst TYPES: TypesConst[] = [\r\n  {\r\n    name: \"Оклад за месяц\",\r\n    id: \"month\"\r\n  },\r\n  {\r\n    name: \"МРОТ\",\r\n    id: \"min\"\r\n  },\r\n  {\r\n    name: \"Оплата за день\",\r\n    id: \"day\"\r\n  },\r\n  {\r\n    name: \"Оплата за час\",\r\n    id: \"hour\"\r\n  }\r\n];\r\n\r\nconst INFO =\r\n  \"МРОТ - минимальный размер оплаты труда. Разный для разных регионов.\";\r\n\r\nconst renderType = (props: any) => {\r\n  const checked: string = props.checked;\r\n  const tip: boolean = props.tip;\r\n\r\n  return TYPES.map((type: TypesConst) => {\r\n    return (\r\n      <li key={`radio${type.id}`}>\r\n        <span className=\"dot-container\">\r\n          <span className={type.id === checked ? \"dot\" : \"disabled\"}></span>\r\n        </span>\r\n        <input\r\n          className=\"form-chack-input\"\r\n          id={type.id}\r\n          type=\"radio\"\r\n          {...props.input}\r\n          value={type.id}\r\n          checked={checked === type.id}\r\n        />\r\n        <label className=\"form-check-label\" htmlFor={type.id}>\r\n          {type.name}\r\n        </label>\r\n        {type.id === \"min\" ? (\r\n          <div\r\n            ref={props.target}\r\n            className=\"tip-container\"\r\n            onClick={props.handleClick}\r\n          >\r\n            <span className=\"tip\">{tip ? \"x\" : \"i\"}</span>\r\n          </div>\r\n        ) : null}\r\n      </li>\r\n    );\r\n  });\r\n};\r\n\r\nconst Types = (props: any) => {\r\n  const [tip, setTip] = useState<boolean>(false);\r\n  const target = useRef(null);\r\n\r\n  const checked: string = props.checked;\r\n\r\n  const handleClick = () => setTip(!tip);\r\n\r\n  return (\r\n    <ul className=\"list-unstyled\">\r\n      <Field\r\n        name=\"type\"\r\n        checked={checked}\r\n        component={renderType}\r\n        target={target}\r\n        tip={tip}\r\n        handleClick={handleClick}\r\n      />\r\n      <Overlay target={target.current} show={tip} placement=\"bottom-start\">\r\n        {(props: any) => (\r\n          <Tooltip id=\"tip\" {...props}>\r\n            {INFO}\r\n          </Tooltip>\r\n        )}\r\n      </Overlay>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Types;\r\n","import React from \"react\";\r\n\r\nimport \"./tax.styles.scss\";\r\n\r\nimport { Field } from \"redux-form\";\r\n\r\nconst renderSwitch = (props: any) => {\r\n  return (\r\n    <label className=\"switch\">\r\n      <input {...props.input} type=\"checkbox\" defaultChecked={true} />\r\n      <span className=\"slider\"></span>\r\n    </label>\r\n  );\r\n};\r\n\r\nconst Tax = (props: any) => {\r\n  const tax: boolean = props.tax;\r\n\r\n  return (\r\n    <div className=\"tax-container\">\r\n      <div className={tax ? \"gray\" : \"black\"}>Указать с НДФЛ</div>\r\n      <Field name=\"tax\" component={renderSwitch} />\r\n      <div className={tax ? \"black\" : \"gray\"}>Без НДФЛ</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tax;\r\n","export const numberFormat = (str: string, calc?: string, tax?: boolean) => {\r\n  let newFormat = str.split(\"\").filter(num => num !== \" \");\r\n  if (calc) {\r\n    const value = parseInt(newFormat.join(\"\"));\r\n    if (tax) {\r\n      const total = Math.round(value / 0.87);\r\n      if (calc === \"tax\") {\r\n        newFormat = (total - value).toString().split(\"\");\r\n      } else if (calc === \"total\") {\r\n        newFormat = total.toString().split(\"\");\r\n      }\r\n    } else {\r\n      const tax = Math.round(value * 0.13);\r\n      if (calc === \"tax\") {\r\n        newFormat = tax.toString().split(\"\");\r\n      } else if (calc === \"amount\") {\r\n        newFormat = (value - tax).toString().split(\"\");\r\n      }\r\n    }\r\n  }\r\n  newFormat.reverse();\r\n  let index = 0;\r\n  let count = 0;\r\n  while (index < newFormat.length) {\r\n    if (count === 3 && index !== newFormat.length) {\r\n      newFormat.splice(index, 0, \" \");\r\n      count = 0;\r\n    } else {\r\n      count++;\r\n    }\r\n    index++;\r\n  }\r\n  newFormat.reverse();\r\n  return newFormat.join(\"\");\r\n};\r\n","import React from \"react\";\r\n\r\nimport { Field } from \"redux-form\";\r\n\r\nimport \"./amount.styles.scss\";\r\n\r\nimport { numberFormat } from \"../../util/number-format\";\r\n\r\nconst renderAmount = (props: any) => (\r\n  <input\r\n    {...props.input}\r\n    value={numberFormat(props.input.value)}\r\n    className=\"form-control\"\r\n    type=\"text\"\r\n  />\r\n);\r\n\r\nconst onlyNumber = (str: string) => {\r\n  if (!str) return false;\r\n  const newStr = str.split(\" \").join(\"\");\r\n  const regex = /^\\d+$/;\r\n  if (regex.test(newStr)) return true;\r\n  else return false;\r\n};\r\n\r\nconst Amount = (props: any) => {\r\n  const type: string = props.type;\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        type === \"min\" ? \"amount-container hidden\" : \"amount-container\"\r\n      }\r\n    >\r\n      <Field name=\"amount\" component={renderAmount} validate={onlyNumber} />\r\n      <span className=\"currency-sign\">\r\n        &#8381; {type === \"hour\" ? \" в час\" : type === \"day\" ? \" в день\" : \"\"}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Amount;\r\n","import React from \"react\";\r\n\r\nimport \"./info.styles.scss\";\r\n\r\nimport { numberFormat } from \"../../util/number-format\";\r\n\r\nimport { Row } from \"react-bootstrap\";\r\n\r\nconst Info = (props: any) => {\r\n  const value: string = props.value;\r\n  const tax: boolean = props.tax;\r\n  return (\r\n    <Row>\r\n      <div className={\"info-container\"}>\r\n        <div>\r\n          {numberFormat(value, \"amount\", tax)} &#8381;\r\n          <span className=\"font-regular\">\r\n            {\" \"}\r\n            сотрудник будет получать на руки\r\n          </span>\r\n        </div>\r\n        <div>\r\n          {numberFormat(value, \"tax\", tax)} &#8381;\r\n          <span className=\"font-regular\"> НДФЛ, 13% от оклада</span>\r\n        </div>\r\n        <div>\r\n          {numberFormat(value, \"total\", tax)} &#8381;\r\n          <span className=\"font-regular\"> за сотрудника в месяц</span>\r\n        </div>\r\n      </div>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","import React from \"react\";\r\n\r\nimport \"./form.styles.scss\";\r\n\r\nimport { reduxForm } from \"redux-form\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Types from \"../types/types.component\";\r\nimport Tax from \"../tax/tax.component\";\r\nimport Amount from \"../amount/amount.component\";\r\nimport Info from \"../info/info.component\";\r\n\r\nimport { Container, Row } from \"react-bootstrap\";\r\n\r\nconst Form = (props: any) => {\r\n  const amount: string =\r\n    (props.state && props.state.values && props.state.values.amount) || \"\";\r\n  const tax: boolean =\r\n    props.state && props.state.values && props.state.values.tax !== undefined\r\n      ? props.state.values.tax\r\n      : true;\r\n  const type: string =\r\n    props.state && props.state.values && props.state.values.type\r\n      ? props.state.values.type\r\n      : \"month\";\r\n  const valid: boolean = props.valid;\r\n\r\n  return (\r\n    <Container>\r\n      <Row>Сумма</Row>\r\n      <Row>\r\n        <form>\r\n          <Types checked={type} />\r\n          <Tax tax={tax} />\r\n          <Amount type={type} />\r\n        </form>\r\n      </Row>\r\n      {type === \"month\" && !valid && amount.length !== 0 ? (\r\n        <Info value={amount} type={type} tax={tax} />\r\n      ) : (\r\n        <div className=\"instead-of-info\"></div>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  state: state.form.payment\r\n});\r\n\r\nconst ConnectForm = connect(mapStateToProps)(Form);\r\n\r\nexport default reduxForm({\r\n  form: \"payment\"\r\n})(ConnectForm);\r\n","import React from \"react\";\n\nimport { Provider } from \"react-redux\";\nimport { createStore, combineReducers } from \"redux\";\nimport { reducer as formReducer } from \"redux-form\";\n\nimport \"./custom.scss\";\n\nimport Form from \"./components/form/form.component\";\n\nconst reducers = combineReducers({ form: formReducer });\nconst store = createStore(reducers);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Form />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}