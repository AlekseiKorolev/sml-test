{"version":3,"sources":["redux/store.ts","components/types/types.component.tsx","components/tax/tax.component.tsx","util/numberFormat.ts","util/numberValidator.ts","components/amount/amount.component.tsx","components/info/info.component.tsx","util/calculate.ts","components/form/form.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["composeEhnancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunk","reducers","combineReducers","form","formReducer","store","createStore","applyMiddleware","TYPES","name","id","renderTooltip","props","Tooltip","renderType","checked","tip","input","target","handleClick","map","type","key","className","htmlFor","value","OverlayTrigger","placement","delay","show","hide","overlay","ref","onClick","Types","useState","setTip","useRef","Field","component","Overlay","current","renderSwitch","defaultChecked","Tax","tax","str","newFormat","split","reverse","index","count","length","splice","join","newStr","filter","num","includes","_","i","numberFormat","parseInt","toString","renderAmount","numberValidator","Amount","Info","withTax","res","amount","total","temp","Math","round","Object","keys","calculate","Row","reduxForm","useSelector","state","payment","values","undefined","Container","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.40dbe546.chunk.js","sourcesContent":["import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport { reducer as formReducer } from \"redux-form\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\nconst composeEhnancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst reducers = combineReducers({\r\n  form: formReducer\r\n});\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  initialState,\r\n  compose(applyMiddleware(...middleware), composeEhnancers())\r\n);\r\n\r\nexport default store;\r\n","import React, { useState, useRef } from \"react\";\r\n\r\nimport \"./types.styles.scss\";\r\n\r\nimport { Field } from \"redux-form\";\r\n\r\nimport { Overlay, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\n\r\ninterface TypesConst {\r\n  name: string;\r\n  id: string;\r\n}\r\n\r\nconst TYPES: TypesConst[] = [\r\n  {\r\n    name: \"Оклад за месяц\",\r\n    id: \"month\"\r\n  },\r\n  {\r\n    name: \"МРОТ\",\r\n    id: \"min\"\r\n  },\r\n  {\r\n    name: \"Оплата за день\",\r\n    id: \"day\"\r\n  },\r\n  {\r\n    name: \"Оплата за час\",\r\n    id: \"hour\"\r\n  }\r\n];\r\n\r\nconst INFO =\r\n  \"МРОТ - минимальный размер оплаты труда. Разный для разных регионов.\";\r\n\r\nconst renderTooltip = (props: any) => (\r\n  <Tooltip id=\"tip\" {...props}>\r\n    {INFO}\r\n  </Tooltip>\r\n);\r\n\r\ninterface RenderType {\r\n  checked: string;\r\n  tip: boolean;\r\n  input: any;\r\n  target: React.RefObject<HTMLDivElement>;\r\n  handleClick: (event: React.MouseEvent<HTMLDivElement>) => void;\r\n}\r\n\r\nconst renderType = ({\r\n  checked,\r\n  tip,\r\n  input,\r\n  target,\r\n  handleClick\r\n}: RenderType) => {\r\n  return TYPES.map((type: TypesConst) => {\r\n    return (\r\n      <li key={`radio${type.id}`}>\r\n        <label className=\"form-check-label\" htmlFor={type.id}>\r\n          <span className=\"dot-container\">\r\n            <span className={type.id === checked ? \"dot\" : \"disabled\"}></span>\r\n          </span>\r\n          <input\r\n            className=\"form-chack-input\"\r\n            id={type.id}\r\n            type=\"radio\"\r\n            {...input}\r\n            value={type.id}\r\n            checked={checked === type.id}\r\n          />\r\n          {type.name}\r\n        </label>\r\n        {type.id === \"min\" ? (\r\n          <OverlayTrigger\r\n            placement=\"bottom-start\"\r\n            delay={{ show: 50, hide: 50 }}\r\n            overlay={renderTooltip}\r\n          >\r\n            <div ref={target} className=\"tip-container\" onClick={handleClick}>\r\n              <span className=\"tip\">{tip ? \"x\" : \"i\"}</span>\r\n            </div>\r\n          </OverlayTrigger>\r\n        ) : null}\r\n      </li>\r\n    );\r\n  });\r\n};\r\n\r\nconst Types = ({ checked }: { checked: string }) => {\r\n  const [tip, setTip] = useState<boolean>(false);\r\n  const target = useRef(null);\r\n\r\n  const handleClick = () => setTip(!tip);\r\n\r\n  return (\r\n    <ul className=\"list-unstyled\">\r\n      <Field\r\n        name=\"type\"\r\n        checked={checked}\r\n        component={renderType}\r\n        target={target}\r\n        tip={tip}\r\n        handleClick={handleClick}\r\n      />\r\n      <Overlay target={target.current} show={tip} placement=\"bottom-start\">\r\n        {renderTooltip}\r\n      </Overlay>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Types;\r\n","import React from \"react\";\r\n\r\nimport \"./tax.styles.scss\";\r\n\r\nimport { Field } from \"redux-form\";\r\n\r\nconst renderSwitch = (props: any) => {\r\n  return (\r\n    <label className=\"switch\">\r\n      <input {...props.input} type=\"checkbox\" defaultChecked={true} />\r\n      <span className=\"slider\"></span>\r\n    </label>\r\n  );\r\n};\r\n\r\nconst Tax = ({ tax }: { tax: boolean }) => {\r\n  return (\r\n    <div className=\"tax-container\">\r\n      <div className={tax ? \"gray\" : \"black\"}>Указать с НДФЛ</div>\r\n      <Field name=\"tax\" component={renderSwitch} />\r\n      <div className={tax ? \"black\" : \"gray\"}>Без НДФЛ</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tax;\r\n","export default (str: string): string => {\r\n  const newFormat: string[] = str.split(\"\").reverse();\r\n  let index = 0;\r\n  let count = 0;\r\n  while (index < newFormat.length) {\r\n    if (count === 3 && index !== newFormat.length) {\r\n      newFormat.splice(index, 0, \" \");\r\n      count = 0;\r\n    } else {\r\n      count++;\r\n    }\r\n    index++;\r\n  }\r\n  newFormat.reverse();\r\n  return newFormat.join(\"\");\r\n};\r\n","import numberFormat from \"./numberFormat\";\r\n\r\nexport default (str: string): string => {\r\n  if (!str) return \"\";\r\n  const newStr = str\r\n    .split(\"\")\r\n    .filter(num => \"0123456789\".includes(num))\r\n    .filter((_, i) => i < 12)\r\n    .join(\"\");\r\n  return numberFormat(\r\n    parseInt(newStr) > 999000000000 ? (999000000000).toString() : newStr\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { Field } from \"redux-form\";\r\n\r\nimport \"./amount.styles.scss\";\r\n\r\nimport numberValidator from \"../../util/numberValidator\";\r\n\r\nconst renderAmount = (props: any) => (\r\n  <input\r\n    {...props.input}\r\n    value={numberValidator(props.input.value)}\r\n    className=\"form-control\"\r\n    type=\"text\"\r\n  />\r\n);\r\n\r\nconst Amount = ({ type }: { type: string }) => {\r\n  return (\r\n    <div className={\"amount-container\"}>\r\n      <Field name=\"amount\" component={renderAmount} />\r\n      <span className=\"currency-sign\">\r\n        &#8381; {type === \"hour\" ? \" в час\" : type === \"day\" ? \" в день\" : \"\"}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Amount;\r\n","import React from \"react\";\r\n\r\nimport \"./info.styles.scss\";\r\n\r\nimport calculate from \"../../util/calculate\";\r\nimport numberValidator from \"../../util/numberValidator\";\r\n\r\nimport { Row } from \"react-bootstrap\";\r\n\r\ninterface InfoProps {\r\n  value: string;\r\n  withTax: boolean;\r\n}\r\n\r\ninterface InfoState {\r\n  amount: string;\r\n  tax: string;\r\n  total: string;\r\n}\r\n\r\nconst Info = ({ value, withTax }: InfoProps) => {\r\n  const res: InfoState = calculate(numberValidator(value), withTax);\r\n  return (\r\n    <Row>\r\n      <div className={\"info-container\"}>\r\n        <div>\r\n          {res.amount} &#8381;\r\n          <span className=\"font-regular\">\r\n            {\" \"}\r\n            сотрудник будет получать на руки\r\n          </span>\r\n        </div>\r\n        <div>\r\n          {res.tax} &#8381;\r\n          <span className=\"font-regular\"> НДФЛ, 13% от оклада</span>\r\n        </div>\r\n        <div>\r\n          {res.total} &#8381;\r\n          <span className=\"font-regular\"> за сотрудника в месяц</span>\r\n        </div>\r\n      </div>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","import numberFormat from \"./numberFormat\";\r\n\r\ninterface NumberFormat {\r\n  amount: string;\r\n  tax: string;\r\n  total: string;\r\n}\r\n\r\nexport default (str: string, tax: boolean): NumberFormat => {\r\n  const newFormat: string[] = str.split(\"\").filter(num => num !== \" \");\r\n  const res: any = { amount: \"\", tax: \"\", total: \"\" };\r\n  const value: number = parseInt(newFormat.join(\"\"));\r\n  let temp: number = 0;\r\n  if (!tax) {\r\n    temp = Math.round(value * 0.13);\r\n    res.total = value.toString();\r\n    res.tax = temp.toString();\r\n    res.amount = (value - temp).toString();\r\n  } else {\r\n    temp = Math.round(value / 0.87);\r\n    res.amount = value.toString();\r\n    res.tax = (temp - value).toString();\r\n    res.total = temp.toString();\r\n  }\r\n\r\n  for (let key of Object.keys(res)) {\r\n    res[key] = numberFormat(res[key]);\r\n  }\r\n\r\n  return res;\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./form.styles.scss\";\r\n\r\nimport { reduxForm, InjectedFormProps } from \"redux-form\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport Types from \"../types/types.component\";\r\nimport Tax from \"../tax/tax.component\";\r\nimport Amount from \"../amount/amount.component\";\r\nimport Info from \"../info/info.component\";\r\n\r\nimport { Container, Row } from \"react-bootstrap\";\r\n\r\ninterface FormProps {\r\n  amount: string;\r\n  tax: boolean;\r\n  type: string;\r\n}\r\n\r\nconst Form: React.FC<InjectedFormProps<FormProps>> = (props: any) => {\r\n  const store: any = useSelector(state => state);\r\n  const amount = store?.form?.payment?.values?.amount || \"\";\r\n  const tax =\r\n    store?.form?.payment?.values?.tax !== undefined\r\n      ? store?.form?.payment?.values?.tax\r\n      : true;\r\n  const type = store?.form?.payment?.values?.type || \"month\";\r\n\r\n  return (\r\n    <Container>\r\n      <Row>Сумма</Row>\r\n      <Row>\r\n        <form>\r\n          <Types checked={type} />\r\n          {type !== \"min\" && <Tax tax={tax} />}\r\n          {type !== \"min\" && <Amount type={type} />}\r\n        </form>\r\n      </Row>\r\n      {type === \"month\" && amount.length !== 0 ? (\r\n        <Info value={amount} withTax={tax} />\r\n      ) : (\r\n        <div className=\"instead-of-info\"></div>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default reduxForm<FormProps>({\r\n  form: \"payment\"\r\n})(Form);\r\n","import React from \"react\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nimport \"./custom.scss\";\n\nimport Form from \"./components/form/form.component\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Form />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}